// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ticketquerier/v1/service.proto

package ticketquerierv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketQuerierService_QueryTickets_FullMethodName  = "/ticketquerier.v1.TicketQuerierService/QueryTickets"
	TicketQuerierService_GetTicketById_FullMethodName = "/ticketquerier.v1.TicketQuerierService/GetTicketById"
)

// TicketQuerierServiceClient is the client API for TicketQuerierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketQuerierServiceClient interface {
	QueryTickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (*QueryTicketsResponse, error)
	GetTicketById(ctx context.Context, in *GetTicketByIdRequest, opts ...grpc.CallOption) (*GetTicketByIdResponse, error)
}

type ticketQuerierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketQuerierServiceClient(cc grpc.ClientConnInterface) TicketQuerierServiceClient {
	return &ticketQuerierServiceClient{cc}
}

func (c *ticketQuerierServiceClient) QueryTickets(ctx context.Context, in *QueryTicketsRequest, opts ...grpc.CallOption) (*QueryTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTicketsResponse)
	err := c.cc.Invoke(ctx, TicketQuerierService_QueryTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketQuerierServiceClient) GetTicketById(ctx context.Context, in *GetTicketByIdRequest, opts ...grpc.CallOption) (*GetTicketByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketByIdResponse)
	err := c.cc.Invoke(ctx, TicketQuerierService_GetTicketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketQuerierServiceServer is the server API for TicketQuerierService service.
// All implementations must embed UnimplementedTicketQuerierServiceServer
// for forward compatibility.
type TicketQuerierServiceServer interface {
	QueryTickets(context.Context, *QueryTicketsRequest) (*QueryTicketsResponse, error)
	GetTicketById(context.Context, *GetTicketByIdRequest) (*GetTicketByIdResponse, error)
	mustEmbedUnimplementedTicketQuerierServiceServer()
}

// UnimplementedTicketQuerierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketQuerierServiceServer struct{}

func (UnimplementedTicketQuerierServiceServer) QueryTickets(context.Context, *QueryTicketsRequest) (*QueryTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTickets not implemented")
}
func (UnimplementedTicketQuerierServiceServer) GetTicketById(context.Context, *GetTicketByIdRequest) (*GetTicketByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketById not implemented")
}
func (UnimplementedTicketQuerierServiceServer) mustEmbedUnimplementedTicketQuerierServiceServer() {}
func (UnimplementedTicketQuerierServiceServer) testEmbeddedByValue()                              {}

// UnsafeTicketQuerierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketQuerierServiceServer will
// result in compilation errors.
type UnsafeTicketQuerierServiceServer interface {
	mustEmbedUnimplementedTicketQuerierServiceServer()
}

func RegisterTicketQuerierServiceServer(s grpc.ServiceRegistrar, srv TicketQuerierServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketQuerierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketQuerierService_ServiceDesc, srv)
}

func _TicketQuerierService_QueryTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketQuerierServiceServer).QueryTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketQuerierService_QueryTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketQuerierServiceServer).QueryTickets(ctx, req.(*QueryTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketQuerierService_GetTicketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketQuerierServiceServer).GetTicketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketQuerierService_GetTicketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketQuerierServiceServer).GetTicketById(ctx, req.(*GetTicketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketQuerierService_ServiceDesc is the grpc.ServiceDesc for TicketQuerierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketQuerierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketquerier.v1.TicketQuerierService",
	HandlerType: (*TicketQuerierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTickets",
			Handler:    _TicketQuerierService_QueryTickets_Handler,
		},
		{
			MethodName: "GetTicketById",
			Handler:    _TicketQuerierService_GetTicketById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketquerier/v1/service.proto",
}
